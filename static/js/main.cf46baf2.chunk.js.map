{"version":3,"sources":["components/PortfolioCarousel/noatsBanner.png","components/MyNavbar/index.js","components/PortfolioCarousel/index.js","components/PortfolioAccordion/index.js","components/MyTabs/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyNavbar","Navbar","bg","variant","Brand","href","alt","src","width","height","className","PortfolioCarousel","useState","index","setIndex","Carousel","activeIndex","onSelect","selectedIndex","e","Item","require","Caption","MyAccordion","Accordion","Card","Header","Toggle","as","Button","eventKey","Collapse","Body","MyTabs","Tabs","defaultActiveKey","id","Tab","title","PortfolioAccordion","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cf46baf2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noatsBanner.7eec437d.png\";","import React from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nfunction MyNavbar() {\r\n  return (\r\n    <div>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n    <Navbar.Brand href=\"/\">\r\n      <img\r\n        alt=\"\"\r\n        src=\"/logo.svg\"\r\n        width=\"30\"\r\n        height=\"30\"\r\n        className=\"d-inline-block align-top\"\r\n      />{' '}\r\n      Jeremy Flowers\r\n    </Navbar.Brand>\r\n  </Navbar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyNavbar","import React, { useState } from \"react\";\r\n// Remember to put methods you'll need in the {} above; this is going to be a common troubleshooting issue.\r\n\r\n// Import the carousel component from our CSS library\r\nimport Carousel from \"react-bootstrap/Carousel\";\r\n\r\n// Eventual step: add a button in each carousel slide that reveals cards below. Slides can be intro/contact - projects - professional - personal, each will populate different cards underneath. Also pause the carousel on mouseover.\r\n\r\n\r\n// This is the template for how we'll be using the carousel.\r\nfunction PortfolioCarousel() {\r\n  const [index, setIndex] = useState(0);\r\n\r\n  const handleSelect = (selectedIndex, e) => {\r\n    setIndex(selectedIndex);\r\n  };\r\n\r\n  return (\r\n    <Carousel activeIndex={index} onSelect={handleSelect}>\r\n\r\n      <Carousel.Item>\r\n        <img\r\n          className=\"d-block w-100\"\r\n          src={require('./noatsBanner.png')}\r\n          alt=\"Noats\"\r\n        />\r\n        <Carousel.Caption>\r\n          <h3>Noats</h3>\r\n          <p>SQL powered recipe app.</p>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n\r\n      <Carousel.Item>\r\n        <img\r\n          className=\"d-block w-100\"\r\n          src=\"https://placebear.com/800/200\"\r\n          alt=\"Third slide\"\r\n        />\r\n        <Carousel.Caption>\r\n          <h3>Second slide label</h3>\r\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n\r\n      <Carousel.Item>\r\n        <img\r\n          className=\"d-block w-100\"\r\n          src=\"https://placebear.com/800/200\"\r\n          alt=\"Third slide\"\r\n        />\r\n        <Carousel.Caption>\r\n          <h3>Third slide label</h3>\r\n        <p>\r\n            Praesent commodo cursus magna, vel scelerisque nisl consectetur.\r\n        </p>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n\r\n    </Carousel>\r\n  );\r\n}\r\n\r\nexport default PortfolioCarousel;\r\n","import React from 'react';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nfunction MyAccordion() {\r\n    return (\r\n<Accordion>\r\n\r\n  <Card>\r\n    <Card.Header>\r\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n        Uplift\r\n      </Accordion.Toggle>\r\n    </Card.Header>\r\n    <Accordion.Collapse eventKey=\"0\">\r\n      <Card.Body>\r\n          <h1>Uplift</h1>\r\n          <h2>Relaxation Randomized</h2>\r\n          <p>Uplift is a simple app that delivers wholesome content as a pleasant distraction from traditional social media. Currently, the app delivers randomized content through API portals including Giphy, Spoonacular, and Youtube. Future iterations will allow saving and sharing of favorite content. This was a collaborative project.</p>\r\n          <br />\r\n          <p><a href=\"https://swist92.github.io/project1vibe/\">Deployed Application via Github</a></p>\r\n          <p><a href=\"https://github.com/Vega2020/project1vibe\">Github repository</a></p>\r\n\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n\r\n  <Card>\r\n    <Card.Header>\r\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n        React Docs Walkthrough\r\n      </Accordion.Toggle>\r\n    </Card.Header>\r\n    <Accordion.Collapse eventKey=\"1\">\r\n      <Card.Body>\r\n        <h1>React Docs Walkthrough</h1>\r\n        <h2>Let's do this together</h2>\r\n        <p>React is an awesome web development tool, but it has a steep learning curve. The docs are well-written but intimidating, and don't go into as much detail as they could. Lucky for you, your friend Vega has gone over them in detail and published these annotated notes breaking it all down in plain language. We're in this together. Let's do it.</p>\r\n        <br />\r\n        <p><a href=\"https://github.com/Vega2020/react-tutorial\">Github repository</a></p>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n  \r\n  <Card>\r\n    <Card.Header>\r\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\">\r\n        ReadMe Generator\r\n      </Accordion.Toggle>\r\n    </Card.Header>\r\n    <Accordion.Collapse eventKey=\"2\">\r\n      <Card.Body>\r\n        <h1>ReadMe Generator</h1>\r\n        <h2>So you can get back to coding</h2>\r\n        <p>Writing a readme is an important part of making a usable app, but it's hard to remember every section off the top of your head. This command line application collects all the necessary information from you with prompts and outputs it to a text file.</p>\r\n        <br />\r\n        <p><a href=\"https://github.com/Vega2020/Readme-Generator\">Github repository</a></p>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n  \r\n  <Card>\r\n    <Card.Header>\r\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"3\">\r\n        Budget Tracker\r\n      </Accordion.Toggle>\r\n    </Card.Header>\r\n    <Accordion.Collapse eventKey=\"3\">\r\n      <Card.Body>\r\n        <h1>Budget Tracker</h1>\r\n        <h2>Progressive Web App</h2>\r\n        <p>This progressive budget tracker allows you to download the app from the browser and run it natively. You can enter transactions while offline and they'll be uploaded when you sign back in.</p>\r\n        <br />\r\n        <p><a href=\"https://github.com/Vega2020/budget-tracker\">Github repository</a></p>\r\n        <p><a href=\"https://secret-chamber-71580.herokuapp.com/\">Deployed application via Heroku</a></p>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n\r\n  <Card>\r\n    <Card.Header>\r\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"4\">\r\n        EatDaBurger\r\n      </Accordion.Toggle>\r\n    </Card.Header>\r\n    <Accordion.Collapse eventKey=\"4\">\r\n      <Card.Body>\r\n        <h1>EatDaBurger</h1>\r\n        <h2>Burger Saving Full-Stack App</h2>\r\n        <p>EatDaBurger is a simple web app that stores user input in an interactive SQL interface. This allows the user to make up a burger, save it, and even move it back and forth from the list of burgers that have already been tried.</p>\r\n        <p>A future application of this technology would be a site that allows users to set daily goals for diet, exercise etc in different priority categories so they can get an overview of what's most important to them at the moment and where to focus their energy.</p>\r\n        <br />\r\n        <p><a href=\"https://github.com/Vega2020/EatDaBurger\">Github Repo</a></p>\r\n        <p><a href=\"https://radiant-river-09328.herokuapp.com\">Deployed App via Heroku</a></p>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n\r\n  <Card>\r\n    <Card.Header>\r\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"5\">\r\n        Noats\r\n      </Accordion.Toggle>\r\n    </Card.Header>\r\n    <Accordion.Collapse eventKey=\"5\">\r\n      <Card.Body>Hello! I'm another body</Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n    \r\n  <Card>\r\n    <Card.Header>\r\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"6\">\r\n        ShapeShifter\r\n      </Accordion.Toggle>\r\n    </Card.Header>\r\n    <Accordion.Collapse eventKey=\"6\">\r\n      <Card.Body>\r\n        ShapeShifter is a tile matching game for toddlers and children\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n\r\n  <Card>\r\n    <Card.Header>\r\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"7\">\r\n        ABA for Parents\r\n      </Accordion.Toggle>\r\n    </Card.Header>\r\n    <Accordion.Collapse eventKey=\"7\">\r\n      <Card.Body>\r\n        <h1>ABA for Parents</h1>\r\n        <h2>You got this</h2>\r\n        <p>ABA for Parents is a workshop I ran in Pittsburgh on behalf of Autism Connections of PA.</p>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n\r\n</Accordion>\r\n    )\r\n}\r\n\r\nexport default MyAccordion\r\n","import React from 'react';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport PortfolioCarousel from '../PortfolioCarousel';\r\nimport PortfolioAccordion from '../PortfolioAccordion';\r\n\r\nfunction MyTabs() {\r\n  return (\r\n  <Tabs defaultActiveKey=\"portfolio\" id=\"mainTabs\">\r\n\r\n  <Tab eventKey=\"portfolio\" title=\"Portfolio\">\r\n    <PortfolioCarousel></PortfolioCarousel>\r\n    <PortfolioAccordion></PortfolioAccordion>\r\n  </Tab>\r\n\r\n  <Tab eventKey=\"about\" title=\"About\">\r\n    <p>Hello World</p>\r\n  </Tab>\r\n\r\n  <Tab eventKey=\"contact\" title=\"Contact\">\r\n    <p>flowersje08@gmail.com</p>\r\n  </Tab>\r\n</Tabs>\r\n  )\r\n}\r\n\r\nexport default MyTabs","import React from 'react';\r\nimport './App.css';\r\nimport MyNavbar from './components/MyNavbar';\r\nimport MyTabs from './components/MyTabs'\r\n\r\n// Have a resume component that pops up on click\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n    <MyNavbar></MyNavbar>\r\n    <MyTabs></MyTabs>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}